import tkinter as tk
from tkinter import ttk

stripColor = {
    'preto': 0,
    'marrom': 1,
    'vermelho': 2,
    'laranja': 3,
    'amarelo': 4,
    'verde': 5,
    'azul': 6,
    'violeta': 7,
    'cinza': 8,
    'branco': 9
}

stripColorMultiplier = {
    'preto': 1,
    'marrom': 10,
    'vermelho': 100,
    'laranja': 1000,
    'amarelo': 10000,
    'verde': 100000,
    'azul': 1000000,
    'violeta': 10000000,
    'cinza': 100000000,
    'branco': 1000000000
}

tolerance_values = {
    'marrom': 0.01,  # Brown - Tolerance ±1%
    'vermelho': 0.02,  # Red - Tolerance ±2%
    'verde': 0.005,  # Green - Tolerance ±0.5%
    'azul': 0.0025,  # Blue - Tolerance ±0.25%
    'violeta': 0.001,  # Violet - Tolerance ±0.1%
    'dourado': 0.05,  # Gold - Tolerance ±5%
    'prateado': 0.1  # Silver - Tolerance ±10%
}


def calc_resistance_2_strips(color_band1, color_band2, color_band_multiplier):
    value = ((stripColor[color_band1] * 10 + stripColor[color_band2]) * stripColorMultiplier[color_band_multiplier])
    return value


def calc_resistance_3_strips(color_band1, color_band2, color_band3, color_band_multiplier):
    value = (stripColor[color_band1] * 100 + stripColor[color_band2] * 10 + stripColor[color_band3]) * \
            stripColorMultiplier[color_band_multiplier]
    return value


def calculate_tolerance(tolerance_band_color):
    value = tolerance_values[tolerance_band_color]
    return value


class ResistorCalculatorApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title('Resistor Calculator')
        self.root.geometry('600x400')
        self.root.resizable(False, False)

        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style()
        style.configure("TLabel", font=("Arial", 14))

        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        ttk.Label(main_frame, text="Resistor Calculator", font=("Helvetica", 24, "bold")).grid(row=0, column=0, columnspan=2, pady=(0, 20))

        ttk.Label(main_frame, text="Number of Bands:", style="TLabel").grid(row=1, column=0, pady=(10, 0), sticky=tk.W)
        self.number_bands_var = tk.IntVar()
        ttk.Radiobutton(main_frame, text='2 strips', variable=self.number_bands_var, value=2, command=self.toggle_third_band).grid(row=1, column=1, pady=(10, 0), sticky=tk.W)
        ttk.Radiobutton(main_frame, text='3 strips', variable=self.number_bands_var, value=3, command=self.toggle_third_band).grid(row=1, column=2, pady=(10, 0), sticky=tk.W)

        ttk.Label(main_frame, text="Color of the First Band:", style="TLabel").grid(row=2, column=0, pady=(10, 0), sticky=tk.W)
        ttk.Label(main_frame, text="Color of the Second Band:", style="TLabel").grid(row=3, column=0, pady=(10, 0), sticky=tk.W)
        ttk.Label(main_frame, text="Color of the Third Band:", style="TLabel").grid(row=4, column=0, pady=(10, 0), sticky=tk.W)
        ttk.Label(main_frame, text="Color of the Multiplier Band:", style="TLabel").grid(row=5, column=0, pady=(10, 0), sticky=tk.W)
        ttk.Label(main_frame, text="Color of the Tolerance Band:", style="TLabel").grid(row=6, column=0, pady=(10, 0), sticky=tk.W)

        self.color_band1_var = tk.StringVar()
        self.color_band2_var = tk.StringVar()
        self.color_band3_var = tk.StringVar()
        self.multiplier_var = tk.StringVar()
        self.tolerance_var = tk.StringVar()

        self.color_band1_combobox = ttk.Combobox(main_frame, textvariable=self.color_band1_var, values=list(stripColor.keys()))
        self.color_band2_combobox = ttk.Combobox(main_frame, textvariable=self.color_band2_var, values=list(stripColor.keys()))
        self.color_band3_combobox = ttk.Combobox(main_frame, textvariable=self.color_band3_var, values=list(stripColor.keys()))
        self.multiplier_combobox = ttk.Combobox(main_frame, textvariable=self.multiplier_var, values=list(stripColorMultiplier.keys()))
        self.tolerance_combobox = ttk.Combobox(main_frame, textvariable=self.tolerance_var, values=list(tolerance_values.keys()))

        self.color_band1_combobox.grid(row=2, column=1, pady=(10, 0), padx=(0, 10))
        self.color_band2_combobox.grid(row=3, column=1, pady=(10, 0), padx=(0, 10))
        self.color_band3_combobox.grid(row=4, column=1, pady=(10, 0), padx=(0, 10))
        self.multiplier_combobox.grid(row=5, column=1, pady=(10, 0), padx=(0, 10))
        self.tolerance_combobox.grid(row=6, column=1, pady=(10, 0), padx=(0, 10))

        # Initially disable the third band color selection
        self.color_band3_combobox["state"] = "disabled"

        calculate_button = ttk.Button(main_frame, text="Calculate", command=self.resistor_calculator)
        calculate_button.grid(row=7, column=0, columnspan=3, pady=(20, 0))

        self.result_label = ttk.Label(main_frame, text="", style="TLabel")
        self.result_label.grid(row=8, column=0, columnspan=3, pady=(10, 0))

        for child in main_frame.winfo_children():
            child.grid_configure(padx=10, pady=5, sticky=tk.W)

    def toggle_third_band(self):
        # Enable or disable the third band color selection based on the number of strips selected
        if self.number_bands_var.get() == 3:
            self.color_band3_combobox["state"] = "readonly"
        else:
            self.color_band3_combobox.set("")  # Clear the selection
            self.color_band3_combobox["state"] = "disabled"

    def resistor_calculator(self):
        # Assuming default value for num_strips
        num_strips = self.number_bands_var.get()

        if num_strips == 2:
            color_band1 = self.color_band1_var.get()
            color_band2 = self.color_band2_var.get()
            color_band_multiplier = self.multiplier_var.get()
            tolerance_band_color = self.tolerance_var.get()

            if not all([color_band1, color_band2, color_band_multiplier, tolerance_band_color]):
                self.result_label.config(text="Please select all options.")
                return

            resistance = calc_resistance_2_strips(color_band1.lower(), color_band2.lower(), color_band_multiplier.lower())
            tolerance = calculate_tolerance(tolerance_band_color.lower())

            resistance_lower = resistance - (resistance * tolerance)
            resistance_upper = resistance + (resistance * tolerance)

        elif num_strips == 3:
            color_band1 = self.color_band1_var.get()
            color_band2 = self.color_band2_var.get()
            color_band3 = self.color_band3_var.get()
            color_band_multiplier = self.multiplier_var.get()
            tolerance_band_color = self.tolerance_var.get()

            if not all([color_band1, color_band2, color_band3, color_band_multiplier, tolerance_band_color]):
                self.result_label.config(text="Please select all options.")
                return

            resistance = calc_resistance_3_strips(color_band1.lower(), color_band2.lower(), color_band3.lower(),
                                                  color_band_multiplier.lower())
            tolerance = calculate_tolerance(tolerance_band_color.lower())

            resistance_lower = resistance - (resistance * tolerance)
            resistance_upper = resistance + (resistance * tolerance)

        else:
            self.result_label.config(text="Invalid choice. Please select 2 or 3.")
            return

        result_text = (
            f"The resistance is: {resistance} ohms and tolerance is: {tolerance}\n"
            f"The lowest resistance is: {resistance_lower} ohms\n"
            f"The highest resistance is: {resistance_upper} ohms"
        )

        self.result_label.config(text=result_text)


if __name__ == '__main__':
    app = ResistorCalculatorApp()
    app.root.mainloop()

    def toggle_third_band(self):
        # Enable or disable the third band color selection based on the number of strips selected
        if self.number_bands_var.get() == 3:
            self.color_band3_combobox["state"] = "readonly"
        else:
            self.color_band3_combobox.set("")  # Clear the selection
            self.color_band3_combobox["state"] = "disabled"

    def resistor_calculator(self):
        num_strips = self.number_bands_var.get()

        if num_strips == 2:
            color_band1 = self.color_band1_var.get()
            color_band2 = self.color_band2_var.get()
            color_band_multiplier = self.multiplier_var.get()
            tolerance_band_color = self.tolerance_var.get()

            if not all([color_band1, color_band2, color_band_multiplier, tolerance_band_color]):
                print("Please select all options.")
                return

            resistance = calc_resistance_2_strips(color_band1.lower(), color_band2.lower(),
                                                  color_band_multiplier.lower())
            tolerance = calculate_tolerance(tolerance_band_color.lower())

            resistance_lower = resistance - (resistance * tolerance)
            resistance_upper = resistance + (resistance * tolerance)

        elif num_strips == 3:
            color_band1 = self.color_band1_var.get()
            color_band2 = self.color_band2_var.get()
            color_band3 = self.color_band3_var.get()
            color_band_multiplier = self.multiplier_var.get()
            tolerance_band_color = self.tolerance_var.get()

            if not all([color_band1, color_band2, color_band3, color_band_multiplier, tolerance_band_color]):
                print("Please select all options.")
                return

            resistance = calc_resistance_3_strips(color_band1.lower(), color_band2.lower(), color_band3.lower(),
                                                  color_band_multiplier.lower())
            tolerance = calculate_tolerance(tolerance_band_color.lower())

            resistance_lower = resistance - (resistance * tolerance)
            resistance_upper = resistance + (resistance * tolerance)

        else:
            print("Invalid choice. Please select 2 or 3.")
            return

        self.result_label.config(text=f"The resistance is: {resistance} ohms and tolerance is: {tolerance}\n"
                                      f"The lowest resistance is: {resistance_lower} ohms\n"
                                      f"The highest resistance is: {resistance_upper} ohms")
